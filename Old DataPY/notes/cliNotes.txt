New Format (Folder + JSON + Runtime Templating):
    jobs/
    └── simple_test_job/                          # job.name from YAML
        ├── simple_test_job_manifest.json         # Build metadata
        ├── sample_job.yaml                       # Original YAML (preserved name)
        ├── simple_test_job_dag.json              # NetworkX DAG as JSON (with raw templates)
        ├── simple_test_job_execution_metadata.json  # Runtime execution data (with raw templates)
        ├── simple_test_job_subjob_metadata.json     # Subjob structure
        └── assets/
            └── context/
                ├── simple_test_job_context.json      # Default context (empty {})
                ├── simple_test_job_dev.json          # Dev context (user-added)
                └── simple_test_job_prod.json         # Prod context (user-added)

Template Resolution Strategy:
- BUILD TIME: No template resolution - raw templates preserved in JSON files
- RUN TIME: Templates resolved from context files in assets/context/
- Context variables: {{context.variable}} - values logged
- Secret variables: {{secret.vault.path}} - only resolution status logged

Benefits:
- One build → Multiple executions with different contexts
- Security: Secrets never stored in build artifacts  
- Human-readable JSON files for debugging
- Runtime flexibility for different environments
- HashiCorp Vault integration ready (placeholder implemented)

Example Usage:
    # Build (no templating)
    pype build test_jobs/sample_job.yaml
    # Creates: jobs/simple_test_job/ with raw templates

    # Run with different contexts
    pype run jobs/simple_test_job                    # Uses simple_test_job_context.json
    pype run jobs/simple_testPype CLI - Command Line Reference
=================================

Version: 0.1.0
Description: DataPY ETL Framework - CLI-first, YAML-driven ETL pipeline engine

USAGE:
    pype [COMMAND] [OPTIONS]

GLOBAL OPTIONS:
    --help, -h           Show this help message
    --version            Show version info

COMMANDS:
---------

1. build
    Usage:
        pype build <job.yaml> [OPTIONS]

    Arguments:
        job.yaml              Path to the YAML job definition (required)

    Options:
        --output, -o <dir>    Base output directory (default: ./jobs/)
        --verbose, -v         Verbosity level: -v (basic), -vv (detailed), -vvv (full)
        --force, -f           Overwrite existing job folder if it exists

    Description:
        Build a job folder with JSON artifacts from YAML job definition.
        Creates folder structure: jobs/{job_name}/
        NO template resolution at build time - templates resolved at runtime.

------------------------------------------------------------

2. register-component  (alias: register)
    Usage:
        pype register-component
        pype register

    Description:
        Register a new ETL component in the registry.

------------------------------------------------------------

3. list-components  (alias: list)
    Usage:
        pype list-components
        pype list

    Description:
        List all registered ETL components.

------------------------------------------------------------

4. component-info  (alias: info)
    Usage:
        pype component-info
        pype info

    Description:
        Display detailed information about a registered component.

------------------------------------------------------------

5. delete-component
    Usage:
        pype delete-component

    Description:
        Delete a component from the registry.

------------------------------------------------------------

6. run
    Usage:
        pype run <job_folder> [OPTIONS]

    Arguments:
        job_folder            Path to the job folder (required)

    Options:
        --context <name>      Context name (e.g., 'dev', 'prod'). 
                             Defaults to {job_name}_context.json
                             Looks for {job_name}_{context}.json
        --resume              Resume from last checkpoint if available

    Description:
        Execute a job folder with runtime template resolution. (Phase 2 - Not implemented)
        Templates in component configs resolved from assets/context/ folder.

------------------------------------------------------------

7. create
    Usage:
        pype create <job_name> [OPTIONS]

    Arguments:
        job_name              Name of the job to create

    Options:
        --template [basic|etl|ml]    Type of job template (default: basic)
        --output <dir>               Target output directory

    Description:
        Create a new job using a predefined template. (Phase 6 - Not implemented)

------------------------------------------------------------

8. pack
    Usage:
        pype pack <job_folder> <output_file>

    Arguments:
        job_folder            Path to job folder
        output_file           Destination package file

    Description:
        Package job folder for sharing or deployment. (Phase 6 - Not implemented)

------------------------------------------------------------

9. create-component
    Usage:
        pype create-component [component_name] [OPTIONS]

    Description:
        Create a new component with interactive prompts.

------------------------------------------------------------

10. component-template
    Usage:
        pype component-template <component_name> [OPTIONS]

    Description:
        Show component template without creating file.

------------------------------------------------------------

11. component-examples
    Usage:
        pype component-examples

    Description:
        Show examples of different component types with naming conventions.

------------------------------------------------------------

12. setup
    Usage:
        pype setup [OPTIONS]

    Options:
        --force               Force re-initialization even if already set up
        --status              Show current setup status without making changes
        --verbose, -v         Show detailed setup progress

    Description:
        Initialize DataPY workspace and check system readiness.

====================================================================================================

BUILD OUTPUT FORMAT CHANGE (v2.0):

Previous Format (.pjob):
    jobs/
    └── sample_job.pjob          # ZIP file with msgpack

New Format (Folder + JSON):
    jobs/
    └── simple_test_job/                          # job.name from YAML
        ├── simple_test_job_manifest.json         # Build metadata
        ├── sample_job.yaml                       # Original YAML (preserved name)
        ├── simple_test_job_dag.json              # NetworkX DAG as JSON
        ├── simple_test_job_execution_metadata.json  # Runtime execution data
        ├── simple_test_job_subjob_metadata.json     # Subjob structure
        └── assets/                               # Future: additional files

Benefits:
- Human-readable JSON files for debugging
- Direct file access without extraction
- Git-friendly folder structure
- Easy production troubleshooting
- Standard tools can inspect all artifacts

Example Usage:
    pype build test_jobs/sample_job.yaml
    # Creates: jobs/simple_test_job/

    pype build test_jobs/sample_job.yaml --output /data/jobs/
    # Creates: /data/jobs/simple_test_job/

    cat jobs/simple_test_job/simple_test_job_dag.json | jq '.nodes[0]'
    # Direct JSON inspection